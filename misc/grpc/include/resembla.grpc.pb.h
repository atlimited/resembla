// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: resembla.proto
#ifndef GRPC_resembla_2eproto__INCLUDED
#define GRPC_resembla_2eproto__INCLUDED

#include "resembla.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace resembla {
namespace server {

class ResemblaService final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::resembla::server::ResemblaResponse>> find(::grpc::ClientContext* context, const ::resembla::server::ResemblaRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::resembla::server::ResemblaResponse>>(findRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::resembla::server::ResemblaResponse>> Asyncfind(::grpc::ClientContext* context, const ::resembla::server::ResemblaRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::resembla::server::ResemblaResponse>>(AsyncfindRaw(context, request, cq, tag));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::resembla::server::ResemblaResponse>* findRaw(::grpc::ClientContext* context, const ::resembla::server::ResemblaRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::resembla::server::ResemblaResponse>* AsyncfindRaw(::grpc::ClientContext* context, const ::resembla::server::ResemblaRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::resembla::server::ResemblaResponse>> find(::grpc::ClientContext* context, const ::resembla::server::ResemblaRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::resembla::server::ResemblaResponse>>(findRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::resembla::server::ResemblaResponse>> Asyncfind(::grpc::ClientContext* context, const ::resembla::server::ResemblaRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::resembla::server::ResemblaResponse>>(AsyncfindRaw(context, request, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReader< ::resembla::server::ResemblaResponse>* findRaw(::grpc::ClientContext* context, const ::resembla::server::ResemblaRequest& request) override;
    ::grpc::ClientAsyncReader< ::resembla::server::ResemblaResponse>* AsyncfindRaw(::grpc::ClientContext* context, const ::resembla::server::ResemblaRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    const ::grpc::RpcMethod rpcmethod_find_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status find(::grpc::ServerContext* context, const ::resembla::server::ResemblaRequest* request, ::grpc::ServerWriter< ::resembla::server::ResemblaResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_find : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_find() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_find() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status find(::grpc::ServerContext* context, const ::resembla::server::ResemblaRequest* request, ::grpc::ServerWriter< ::resembla::server::ResemblaResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestfind(::grpc::ServerContext* context, ::resembla::server::ResemblaRequest* request, ::grpc::ServerAsyncWriter< ::resembla::server::ResemblaResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_find<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_find : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_find() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_find() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status find(::grpc::ServerContext* context, const ::resembla::server::ResemblaRequest* request, ::grpc::ServerWriter< ::resembla::server::ResemblaResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_find : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_find() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::SplitServerStreamingHandler< ::resembla::server::ResemblaRequest, ::resembla::server::ResemblaResponse>(std::bind(&WithSplitStreamingMethod_find<BaseClass>::Streamedfind, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_find() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status find(::grpc::ServerContext* context, const ::resembla::server::ResemblaRequest* request, ::grpc::ServerWriter< ::resembla::server::ResemblaResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedfind(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::resembla::server::ResemblaRequest,::resembla::server::ResemblaResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_find<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_find<Service > StreamedService;
};

}  // namespace server
}  // namespace resembla


#endif  // GRPC_resembla_2eproto__INCLUDED
